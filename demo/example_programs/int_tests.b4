global u16 line = 0
global u16 tests_passed = 0
global u16 total_tests = 0
global str current_type
global u16 sub_test_num

let u16 u16_tmp
let s16 s16_tmp
let u32 u32_tmp
let s32 s32_tmp

def assert(bool condition)
  if condition
    tests_passed++
  else
    sys.print_string(current_type, 0, line)
    sys.print_u16(sub_test_num, 4, line)
    sys.print_string("fail", 7, line)
    if line == 15
      line = 0
      sys.vram.clear()
    else
      line++

  sub_test_num++
  total_tests++
  {write $tests_passed io.out1}
  {write $total_tests io.out2}

def assert_true(bool condition)
  assert(condition)

def assert_false(bool condition)
  assert(!condition)

// u16 tests
current_type = "u16"
sub_test_num = 0

u16_tmp = 1 + 1
assert_true(u16_tmp == 2)

u16_tmp = 1 - 1
assert_true(u16_tmp == 0)

u16_tmp = 1 >> 1
assert_true(u16_tmp == 0)

u16_tmp = 1 << 1
assert_true(u16_tmp == 2)

u16_tmp = 1 * 1
assert_true(u16_tmp == 1)

u16_tmp = 1 / 1
assert_true(u16_tmp == 1)

u16_tmp = 2 * 2
assert_true(u16_tmp == 4)

u16_tmp = 4 / 2
assert_true(u16_tmp == 2)

u16_tmp = 7 * 2
assert_true(u16_tmp == 14)

u16_tmp = 14 / 2
assert_true(u16_tmp == 7)

u16_tmp = 4 ** 4
assert_true(u16_tmp == 256)

u16_tmp = 63 % 4
assert_true(u16_tmp == 3)

assert_true(54 < 65534)

assert_true(3 > 2)

assert_true(2 >= 2)

assert_true(2 <= 3)

u16_tmp = 250 * 147
assert_true(u16_tmp == 36750)

u16_tmp = 9 ** 5
assert_true(u16_tmp == 59049)

u16_tmp = 0xffff + 1
let bool overflow
{write [alu.ov] &overflow}
assert_true(overflow)

assert_false(45000 > 45000)

assert_false(45000 < 45000)

assert_false(45000 != 45000)

assert_true(5 < 65530)

assert_false(5 > 65530)

assert_true(65530 > 5)

assert_false(65530 < 5)

//s16 tests
current_type = "s16"
sub_test_num = 0

s16_tmp = 1 + 1
assert_true(s16_tmp == 2)

s16_tmp = 1 - 1
assert_true(s16_tmp == 0)

s16_tmp = 1 >> 1
assert_true(s16_tmp == 0)

s16_tmp = 1 << 1
assert_true(s16_tmp == 2)

s16_tmp = 1 * 1
assert_true(s16_tmp == 1)

s16_tmp = 1 / 1
assert_true(s16_tmp == 1)

s16_tmp = 2 * 2
assert_true(s16_tmp == 4)

s16_tmp = 4 / 2
assert_true(s16_tmp == 2)

s16_tmp = 7 * 2
assert_true(s16_tmp == 14)

s16_tmp = 14 / 2
assert_true(s16_tmp == 7)

s16_tmp = 4 ** 4
assert_true(s16_tmp == 256)

s16_tmp = 63 % 4
assert_true(s16_tmp == 3)

s16_tmp = 2
assert_true(s16_tmp < 3)

s16_tmp = 3
assert_true(s16_tmp > 2)

s16_tmp = 3
assert_true(s16_tmp >= 2)

s16_tmp = 2
assert_true(s16_tmp <= 3)

s16_tmp = -2 * -2
assert_true(s16_tmp == 4)

s16_tmp = -2 / -2
assert_true(s16_tmp == 1)

s16_tmp = -50 / -10
assert_true(s16_tmp == 5)

s16_tmp = -50 / 10
assert_true(s16_tmp == -5)

s16_tmp = 50 / -10
assert_true(s16_tmp == -5)

s16_tmp = 147 * 147
assert_true(s16_tmp == 21609)

s16_tmp = 9 ** 4
assert_true(s16_tmp == 6561)

s16_tmp = -9 ** 4
assert_true(s16_tmp == 6561)

s16_tmp = -9 ** 3
assert_true(s16_tmp == -729)

s16_tmp = 32760
assert_false(s16_tmp > s16_tmp)

assert_false(s16_tmp < s16_tmp)

assert_false(s16_tmp != s16_tmp)

assert_true(-32760 < s16_tmp)

assert_false(-32760 > s16_tmp)

assert_true(s16_tmp > -32760)

assert_false(s16_tmp < -32760)

s16_tmp = -2 >> 1
assert_true(s16_tmp == -1)

s16_tmp = 0b0101010101010101 << 1
u16_tmp = 0b1010101010101010
assert_true(s16_tmp == u16_tmp)

//u32 tests
current_type = "u32"
sub_test_num = 0

u32_tmp = 1 + 1
assert_true(u32_tmp == 2)

u32_tmp = 1 - 1
assert_true(u32_tmp == 0)

u32_tmp = 1 >> 1
assert_true(u32_tmp == 0)

u32_tmp = 1 << 1
assert_true(u32_tmp == 2)

u32_tmp = 1 * 1
assert_true(u32_tmp == 1)

u32_tmp = 1 / 1
assert_true(u32_tmp == 1)

u32_tmp = 2 * 2
assert_true(u32_tmp == 4)

u32_tmp = 4 / 2
assert_true(u32_tmp == 2)

u32_tmp = 1000000000 / 10
assert_true(u32_tmp == 100000000)

u32_tmp = 999999999 / 9
assert_true(u32_tmp == 111111111)

u32_tmp = 7 * 2
assert_true(u32_tmp == 14)

u32_tmp = 14 / 2
assert_true(u32_tmp == 7)

u32_tmp = 4 ** 4
assert_true(u32_tmp == 256)

u32_tmp = 63 % 4
assert_true(u32_tmp == 3)

u32_tmp = 2
assert_true(u32_tmp < 3)

u32_tmp = 3
assert_true(u32_tmp > 2)

u32_tmp = 3
assert_true(u32_tmp >= 2)

u32_tmp = 2
assert_true(u32_tmp <= 3)

u32_tmp = 250 * 147
assert_true(u32_tmp == 36750)

u32_tmp = 9 ** 5
assert_true(u32_tmp == 59049)

u32_tmp = 0xffffffff + 1
assert_true(u32_tmp == 0)

u32_tmp = 0b01010101010101010101010101010101 >> 1
assert_true(u32_tmp == 0b00101010101010101010101010101010)

u32_tmp = 0b10101010101010101010101010101010 << 1
assert_true(u32_tmp == 0b01010101010101010101010101010100)

u32_tmp = 4294967290
assert_false(u32_tmp > u32_tmp)

assert_false(u32_tmp < u32_tmp)

assert_false(u32_tmp != u32_tmp)

assert_true(5 < u32_tmp)

assert_false(5 > u32_tmp)

assert_true(u32_tmp > 5)

assert_false(u32_tmp < 5)


// s32 tests
current_type = "s32"
sub_test_num = 0

s32_tmp = 1 + 1
assert_true(s32_tmp == 2)

s32_tmp = 1 - 1
assert_true(s32_tmp == 0)

s32_tmp = 1 >> 1
assert_true(s32_tmp == 0)

s32_tmp = 1 << 1
assert_true(s32_tmp == 2)

s32_tmp = 1 * 1
assert_true(s32_tmp == 1)

s32_tmp = 1 / 1
assert_true(s32_tmp == 1)

s32_tmp = 2 * 2
assert_true(s32_tmp == 4)

s32_tmp = 4 / 2
assert_true(s32_tmp == 2)

s32_tmp = 7 * 2
assert_true(s32_tmp == 14)

s32_tmp = 14 / 2
assert_true(s32_tmp == 7)

s32_tmp = 4 ** 4
assert_true(s32_tmp == 256)

s32_tmp = 63 % 4
assert_true(s32_tmp == 3)

s32_tmp = 2
assert_true(s32_tmp < 3)

s32_tmp = 3
assert_true(s32_tmp > 2)

s32_tmp = 3
assert_true(s32_tmp >= 2)

s32_tmp = 2
assert_true(s32_tmp <= 3)

s32_tmp = -2 * -2
assert_true(s32_tmp == 4)

s32_tmp = -2 / -2
assert_true(s32_tmp == 1)

s32_tmp = -50 / -10
assert_true(s32_tmp == 5)

s32_tmp = -50 / 10
assert_true(s32_tmp == -5)

s32_tmp = 50 / -10
assert_true(s32_tmp == -5)

s32_tmp = 147 * 147
assert_true(s32_tmp == 21609)

s32_tmp = 9 ** 4
assert_true(s32_tmp == 6561)

s32_tmp = -9 ** 4
assert_true(s32_tmp == 6561)

s32_tmp = -9  ** 3
assert_true(s32_tmp == -729)

u32_tmp = 0b01010101010101010101010101010101 >> 1
s32_tmp = u32_tmp
assert_true(s32_tmp == 0b00101010101010101010101010101010)

u32_tmp = 0b10101010101010101010101010101010 << 1
s32_tmp = u32_tmp
assert_true(s32_tmp == 0b01010101010101010101010101010100)

s32_tmp = -2147483646 >> 1
assert_true(s32_tmp == -1073741823)

s32_tmp = 2147483643
assert_false(s32_tmp > s32_tmp)

assert_false(s32_tmp < s32_tmp)

assert_false(s32_tmp != s32_tmp)

assert_true(-2147483643 < s32_tmp)

assert_false(-2147483643 > s32_tmp)

assert_true(s32_tmp > -2147483643)

assert_false(s32_tmp < -2147483643)

// print summary
sys.print_u16(tests_passed, 0, line)
sys.print_string("/",3, line)
sys.print_u16(total_tests, 4, line)
sys.print_string("passed",8, line)
