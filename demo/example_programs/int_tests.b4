global u16 line
global str current_type
global u16 tests_passed
global u16 total_tests
global u16 sub_test_num

var u16 u16_tmp
var s16 s16_tmp
var u32 u32_tmp
var s32 s32_tmp

def assert(bool condition)
  if condition
    tests_passed++
  else
    sys.print_string(current_type, 0, line)
    sys.print_u16(sub_test_num, 4, line)
    sys.print_string("fail", 7, line)
    if line == 15
      line = 0
      sys.vram.clear()
    else
      line++

  sub_test_num++
  total_tests++
  {write $tests_passed usrio.out2}
  {write $total_tests usrio.out3}


// u16 tests
current_type = "u16"
sub_test_num = 0

u16_tmp = 1 + 1
assert(u16_tmp == 2)

u16_tmp = 1 - 1
assert(u16_tmp == 0)

u16_tmp = 1 >>
assert(u16_tmp == 0)

u16_tmp = 1 <<
assert(u16_tmp == 2)

u16_tmp = 1 * 1
assert(u16_tmp == 1)

u16_tmp = 1 / 1
assert(u16_tmp == 1)

u16_tmp = 2 * 2
assert(u16_tmp == 4)

u16_tmp = 4 / 2
assert(u16_tmp == 2)

u16_tmp = 7 * 2
assert(u16_tmp == 14)

u16_tmp = 14 / 2
assert(u16_tmp == 7)

u16_tmp = 4 ^ 4
assert(u16_tmp == 256)

u16_tmp = 63 % 4
assert(u16_tmp == 3)

u16_tmp = 2
assert(u16_tmp < 3)

u16_tmp = 3
assert(u16_tmp > 2)

u16_tmp = 3
assert(u16_tmp >= 2)

u16_tmp = 2
assert(u16_tmp <= 3)

u16_tmp = 250 * 147
assert(u16_tmp == 36750)

u16_tmp = 9 ^ 5
assert(u16_tmp == 59049)

u16_tmp = 0xffff + 1
assert(sys.ov)


//s16 tests
current_type = "s16"
sub_test_num = 0

s16_tmp = 1 + 1
assert(s16_tmp == 2)

s16_tmp = 1 - 1
assert(s16_tmp == 0)

s16_tmp = 1 >>
assert(s16_tmp == 0)

s16_tmp = 1 <<
assert(s16_tmp == 2)

s16_tmp = 1 * 1
assert(s16_tmp == 1)

s16_tmp = 1 / 1
assert(s16_tmp == 1)

s16_tmp = 2 * 2
assert(s16_tmp == 4)

s16_tmp = 4 / 2
assert(s16_tmp == 2)

s16_tmp = 7 * 2
assert(s16_tmp == 14)

s16_tmp = 14 / 2
assert(s16_tmp == 7)

s16_tmp = 4 ^ 4
assert(s16_tmp == 256)

s16_tmp = 63 % 4
assert(s16_tmp == 3)

s16_tmp = 2
assert(s16_tmp < 3)

s16_tmp = 3
assert(s16_tmp > 2)

s16_tmp = 3
assert(s16_tmp >= 2)

s16_tmp = 2
assert(s16_tmp <= 3)

s16_tmp = -2 * -2
assert(s16_tmp == 4)

s16_tmp = -2 / -2
assert(s16_tmp == 1)

const s16 minus10 -10
const s16 minus50 -50
const s16 minus5 -5

s16_tmp = minus50 / minus10
assert(s16_tmp == 5)

s16_tmp = minus50 / 10
assert(s16_tmp == minus5)

s16_tmp = 50 / minus10
assert(s16_tmp == minus5)

s16_tmp = 147 * 147
assert(s16_tmp == 21609)

s16_tmp = 9 ^ 4
assert(s16_tmp == 6561)

const s16 minus9 -9
const s16 minus729 -729

s16_tmp = minus9  ^ 4
assert(s16_tmp == 6561)

s16_tmp = minus9  ^ 3
assert(s16_tmp == minus729)


//u32 tests
current_type = "u32"
sub_test_num = 0

u32_tmp = 1 + 1
assert(u32_tmp == 2)

u32_tmp = 1 - 1
assert(u32_tmp == 0)

u32_tmp = 1 >>
assert(u32_tmp == 0)

u32_tmp = 1 <<
assert(u32_tmp == 2)

u32_tmp = 1 * 1
assert(u32_tmp == 1)

u32_tmp = 1 / 1
assert(u32_tmp == 1)

u32_tmp = 2 * 2
assert(u32_tmp == 4)

u32_tmp = 4 / 2
assert(u32_tmp == 2)

u32_tmp = 7 * 2
assert(u32_tmp == 14)

u32_tmp = 14 / 2
assert(u32_tmp == 7)

u32_tmp = 4 ^ 4
assert(u32_tmp == 256)

u32_tmp = 63 % 4
assert(u32_tmp == 3)

u32_tmp = 2
assert(u32_tmp < 3)

u32_tmp = 3
assert(u32_tmp > 2)

u32_tmp = 3
assert(u32_tmp >= 2)

u32_tmp = 2
assert(u32_tmp <= 3)

u32_tmp = 250 * 147
assert(u32_tmp == 36750)

u32_tmp = 9 ^ 5
assert(u32_tmp == 59049)

u32_tmp = 0xffffffff + 1
assert(u32_tmp == 0)


// s32 tests
current_type = "s32"
sub_test_num = 0

s32_tmp = 1 + 1
assert(s32_tmp == 2)

s32_tmp = 1 - 1
assert(s32_tmp == 0)

s32_tmp = 1 >>
assert(s32_tmp == 0)

s32_tmp = 1 <<
assert(s32_tmp == 2)

s32_tmp = 1 * 1
assert(s32_tmp == 1)

s32_tmp = 1 / 1
assert(s32_tmp == 1)

s32_tmp = 2 * 2
assert(s32_tmp == 4)

s32_tmp = 4 / 2
assert(s32_tmp == 2)

s32_tmp = 7 * 2
assert(s32_tmp == 14)

s32_tmp = 14 / 2
assert(s32_tmp == 7)

s32_tmp = 4 ^ 4
assert(s32_tmp == 256)

s32_tmp = 63 % 4
assert(s32_tmp == 3)

s32_tmp = 2
assert(s32_tmp < 3)

s32_tmp = 3
assert(s32_tmp > 2)

s32_tmp = 3
assert(s32_tmp >= 2)

s32_tmp = 2
assert(s32_tmp <= 3)

s32_tmp = -2 * -2
assert(s32_tmp == 4)

s32_tmp = -2 / -2
assert(s32_tmp == 1)

const s32 s32_minus10 -10
const s32 s32_minus50 -50
const s32 s32_minus5 -5

s32_tmp = s32_minus50 / s32_minus10
assert(s32_tmp == 5)

s32_tmp = s32_minus50 / 10
assert(s32_tmp == s32_minus5)

s32_tmp = 50 / s32_minus10
assert(s32_tmp == s32_minus5)

s32_tmp = 147 * 147
assert(s32_tmp == 21609)

s32_tmp = 9 ^ 4
assert(s32_tmp == 6561)

const s32 s32_minus9 -9
const s32 s32_minus729 -729
s32_tmp = s32_minus9 ^ 4
assert(s32_tmp == 6561)

s32_tmp = s32_minus9  ^ 3
assert(s32_tmp == s32_minus729)


// print summary
sys.print_u16(tests_passed, 0, line)
sys.print_string("/",2, line)
sys.print_u16(total_tests, 3, line)
sys.print_string("passed",6, line)
