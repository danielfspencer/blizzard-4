const libs = {
  "sys.consts": [
    "const u16 SYS_ROM_ADDR = #rom.0#",
    "const u16 SYS_VRAM_ADDR = #vram.0#",
    "const u16 SYS_KEYBOARD_ADDR = #io.kbd#",
    "const u16 SYS_TIMER_ADDR = #timer.high#"
  ],
  "sys.u16_multiply": [
    "def sys.u16_multiply(u16 a, u16 b) -> u16",
    "  __return = 0",
    "  while b > 0",
    "    if b",
    "      __return += a",
    "    a = a << 1",
    "    b = b >> 1",
    "  return __return"
  ],
  "sys.u16_divide": [
    "def sys.u16_divide(u16 a, u16 b) -> u16",
    "  if b == 0",
    "    return b",
    "",
    "  __return = 0",
    "  let u16 place = 1",
    "  let u16 a_div_2 = a >> 1",
    "  a_div_2++",
    "",
    "  while a_div_2 > b",
    "    place = place << 1",
    "    b = b << 1",
    "",
    "  while place > 0",
    "    if a >= b",
    "      a -= b",
    "      __return += place",
    "",
    "    place = place >> 1",
    "    b = b >> 1",
    "",
    "  return __return"
  ],
  "sys.u16_exponent": [
    "def sys.u16_exponent(u16 a, u16 b) -> u16",
    "  __return = a",
    "  while b > 1",
    "    __return = __return * a",
    "    b--",
    "  return __return"
  ],
  "sys.u16_modulo": [
    "def sys.u16_modulo(u16 a, u16 b) -> u16",
    "  __return = a / b",
    "  __return = __return * b",
    "  return a - __return"
  ],
  "sys.s16_multiply": [
    "def sys.s16_multiply(s16 a, s16 b) -> s16",
    "  let bool sign = false",
    "  if a < 0",
    "    sign = true",
    "    a = 0 - a",
    "",
    "  if b < 0",
    "    sign = !sign",
    "    b = 0 - b",
    "",
    "  __return = sys.u16_multiply(a,b)",
    "",
    "  if sign",
    "    return 0 - __return",
    "  return __return"
  ],
  "sys.s16_divide": [
    "def sys.s16_divide(s16 a, s16 b) -> s16",
    "  let bool sign = false",
    "  if a < 0",
    "    sign = true",
    "    a = 0 - a",
    "",
    "  if b < 0",
    "    sign = !sign",
    "    b = 0 - b",
    "",
    "  __return = sys.u16_divide(a,b)",
    "",
    "  if sign",
    "    return 0 - __return",
    "  return __return"
  ],
  "sys.s16_exponent": [
    "def sys.s16_exponent(s16 a, s16 b) -> s16",
    "  __return = a",
    "  while b > 1",
    "    __return = __return * a",
    "    b -= 1",
    "  return __return"
  ],
  "sys.s16_modulo": [
    "def sys.s16_modulo(s16 a, s16 b) -> s16",
    "  __return = a / b",
    "  __return = __return * b",
    "  return a - __return"
  ],
  "sys.s16_rshift": [
    "def sys.s16_rshift(s16 a) -> s16",
    "  {write $a alu.1}",
    "  {write 0b1000000000000000 alu.2}",
    "  {write [alu.>>] &__return}",
    "  if #[alu.ov]#",
    "    {write $__return alu.1}",
    "    {write [alu.+] &__return}",
    "  return __return"
  ],
  "sys.u32_add": [
    "def sys.u32_add(u32 a, u32 b) -> u32",
    "  let u16 carry",
    "  {write $a[1] alu.1}",
    "  {write $b[1] alu.2}",
    "  {write [alu.+] &__return[1]}",
    "  {write [alu.ov] &carry}",
    "  {write $a[0] alu.1}",
    "  {write $b[0] alu.2}",
    "  {write [alu.+] &__return[0]}",
    "  {write $__return[0] alu.1}",
    "  {write $carry alu.2}",
    "  {write [alu.+] &__return[0]}",
    "  return __return"
  ],
  "sys.u32_subtract": [
    "def sys.u32_subtract(u32 a, u32 b) -> u32",
    "  {write $b[0] alu.1}",
    "  {write [alu.!] &b[0]}",
    "  {write $b[1] alu.1}",
    "  {write [alu.!] &b[1]}",
    "  b++",
    "  return a + b"
  ],
  "sys.u32_multiply": [
    "def sys.u32_multiply(u32 a, u32 b) -> u32",
    "  __return = 0",
    "  while b != 0",
    "    if b",
    "      __return = __return + a",
    "    a = a << 1",
    "    b = b >> 1",
    "  return __return "
  ],
  "sys.u32_divide": [
    "def sys.u32_divide(u32 a, u32 b) -> u32",
    "  if b == 0",
    "    return b",
    "",
    "  __return = 0",
    "  let u32 place = 1",
    "  let u32 a_div_2 = a >> 1",
    "  a_div_2++",
    "",
    "  while a_div_2 > b",
    "    place = place << 1",
    "    b = b << 1",
    "",
    "  while place != 0",
    "    if a >= b",
    "      a -= b",
    "      __return += place",
    "",
    "    place = place >> 1",
    "    b = b >> 1",
    "",
    "  return __return"
  ],
  "sys.u32_exponent": [
    "def sys.u32_exponent(u32 a, u32 b) -> u32",
    "  __return = a",
    "  while b > 1",
    "    __return = __return * a",
    "    b -= 1",
    "  return __return"
  ],
  "sys.u32_modulo": [
    "def sys.u32_modulo(u32 a, u32 b) -> u32",
    "  __return = a / b",
    "  __return = __return * b",
    "  return a - __return",
  ],
  "sys.u32_lshift": [
    "def sys.u32_lshift(u32 a) -> u32",
    "  {write $a[0] alu.1}",
    "  {write [alu.<<] &__return[0]}",
    "  {write $a[1] alu.1}",
    "  {write [alu.<<] &__return[1]}",
    "  {write 0b1000000000000000 alu.2}",
    "  if #[alu.ov]#",
    "    {write $__return[0] alu.1}",
    "    {write 1 alu.2}",
    "    {write [alu.+] &__return[0]}",
    "  return __return"
  ],
  "sys.u32_rshift": [
    "def sys.u32_rshift(u32 a) -> u32",
    "  {write $a[1] alu.1}",
    "  {write [alu.>>] &__return[1]}",
    "  {write $a[0] alu.1}",
    "  {write [alu.>>] &__return[0]}",
    "  if #$a[0]#",
    "    {write $__return[1] alu.1}",
    "    {write 0b1000000000000000 alu.2}",
    "    {write [alu.+] &__return[1]}",
    "  return __return"
  ],
  "sys.u32_not_equal": [
    "def sys.u32_not_equal(u32 a, u32 b) -> bool",
    "  if #$a[1]# == #$b[1]#",
    "    if #$a[0]# == #$b[0]#",
    "      return false",
    "  return true"
  ],
  "sys.u32_equal": [
    "def sys.u32_equal(u32 a, u32 b) -> bool",
    "  if #$a[1]# == #$b[1]#",
    "    if #$a[0]# == #$b[0]#",
    "      return true",
    "  return false"
  ],
  "sys.u32_greater": [
    "def sys.u32_greater(u32 a, u32 b) -> bool",
    "  if #$a[0]# > #$b[0]#",
    "    return true",
    "  else if #$a[0]# == #$b[0]#",
    "    if #$a[1]# > #$b[1]#",
    "      return true",
    "",
    "  return false"
  ],
  "sys.u32_less": [
    "def sys.u32_less(u32 a, u32 b) -> bool",
    "  if #$a[0]# < #$b[0]#",
    "    return true",
    "  else if #$a[0]# == #$b[0]#",
    "    if #$a[1]# < #$b[1]#",
    "      return true",
    "",
    "  return false"
  ],
  "sys.s32_multiply": [
    "def sys.s32_multiply(s32 a, s32 b) -> s32",
    "  let bool sign = false",
    "  if a < 0",
    "    sign = true",
    "    a = 0 - a",
    "",
    "  if b < 0",
    "    sign = !sign",
    "    b = 0 - b",
    "",
    "  __return = sys.u32_multiply(a,b)",
    "",
    "  if sign",
    "    return 0 - __return",
    "  return __return"
  ],
  "sys.s32_divide": [
    "def sys.s32_divide(s32 a, s32 b) -> s32",
    "  let bool sign = false",
    "  if a < 0",
    "    sign = true",
    "    a = 0 - a",
    "",
    "  if b < 0",
    "    sign = !sign",
    "    b = 0 - b",
    "",
    "  __return = sys.u32_divide(a,b)",
    "",
    "  if sign",
    "    return 0 - __return",
    "  return __return"
  ],
  "sys.s32_exponent": [
    "def sys.s32_exponent(s32 a, s32 b) -> s32",
    "  __return = a",
    "  while b > 1",
    "    __return = __return * a",
    "    b -= 1",
    "  return __return"
  ],
  "sys.s32_modulo": [
    "def sys.s32_modulo(s32 a, s32 b) -> s32",
    "  __return = a / b",
    "  __return = __return * b",
    "  return a - __return",
  ],
  "sys.s32_rshift": [
    "def sys.s32_rshift(s32 a) -> s32",
    "  {write $a[1] alu.1}",
    "  {write [alu.>>] &__return[1]}",
    "  {write $a[0] alu.1}",
    "  {write 0b1000000000000000 alu.2}",
    "  {write [alu.>>] &__return[0]}",
    "  if #[alu.ov]#",
    "    {write $__return[0] alu.1}",
    "    {write [alu.+] &__return[0]}",
    "  if #$a[0]#",
    "    {write $__return[1] alu.1}",
    "    {write [alu.+] &__return[1]}",
    "  return __return"
  ],
  "sys.s32_greater": [
    "def sys.s32_greater(s32 a, s32 b) -> bool",
    "  {write 0b1000000000000000 alu.2}",
    "  {write $a[0] alu.1}",
    "  {write [alu.+] &a[0]}",
    "  {write $b[0] alu.1}",
    "  {write [alu.+] &b[0]}",
    "",
    "  return sys.u32_greater(a,b)"
  ],
  "sys.s32_less": [
    "def sys.s32_less(s32 a, s32 b) -> bool",
    "  {write 0b1000000000000000 alu.2}",
    "  {write $a[0] alu.1}",
    "  {write [alu.+] &a[0]}",
    "  {write $b[0] alu.1}",
    "  {write [alu.+] &b[0]}",
    "",
    "  return sys.u32_less(a,b)"
  ],
  "sys.mem_copy": [
    "def sys.mem_copy(u16 origin_addr, u16 target_addr, u16 length)",
    "  let u16 base_addr = origin_addr",
    "",
    "  origin_addr += length",
    "  target_addr += length ",
    "",
    "  while origin_addr > base_addr",
    "    {write 1 alu.2}",
    "    {write $origin_addr alu.1}",
    "    {write [alu.-] &origin_addr}",
    "    {write $target_addr alu.1}",
    "    {write [alu.-] &target_addr}",
    "    {copy $origin_addr $target_addr}",
  ],
  "sys.array_set": [
    "def sys.array_set(u16 base_addr, u16 item_size, u16 index, u16 item_addr)",
    "  let u16 offset = index * item_size",
    "  base_addr += offset",
    "",
    "  sys.mem_copy(item_addr, base_addr, item_size)"
  ],
  "sys.array_read":  [
    "def sys.array_read(u16 base_addr, u16 item_size, u16 index, u16 target_addr)",
    "  let u16 offset = index * item_size",
    "  base_addr += offset",
    "",
    "  sys.mem_copy(base_addr, target_addr, item_size)"
  ],
  "sys.array_shift":  [
    "def sys.array_shift(u16 base_addr, u16 item_size, u16 index, u16 length)",
    "  let u16 start_addr = index * item_size",
    "  start_addr += base_addr",
    "  length *= item_size",
    "  sys.mem_copy(start_addr, start_addr + item_size, length)",
  ],
  "sys.vram.or_word": [
    "def sys.vram.or_word(u16 word, u16 addr)",
    "  include sys.consts",
    "  addr += SYS_VRAM_ADDR",
    "  {copy $addr alu.1}",
    "  {copy &word alu.2}",
    "  {write [alu.|] $addr}"
  ],
  "sys.vram.nand_word": [
    "def sys.vram.nand_word(u16 word, u16 addr)",
    "  include sys.consts",
    "  addr += SYS_VRAM_ADDR",
    "  {copy $addr alu.2}",
    "  word = !word",
    "  {copy &word alu.1}",
    "  {write [alu.&] $addr}"
  ],
  "sys.vram.set_pixel": [
    "def sys.vram.set_pixel(u16 x, u16 y, bool data = true)",
    "  include sys.consts",
    "  include sys.vram.shifted_pixels",
    "  let u16 column = x >> 4",
    "  let u16 addr = y << 3",
    "  let u16 table_addr",
    "  {write sys.vram.shifted_pixels &table_addr}",
    "",
    "  let u16 pixel = x & 0xf",
    "  addr += column",
    "  table_addr += pixel",
    "  addr += SYS_VRAM_ADDR",
    "  if data",
    "    {copy $table_addr alu.1}",
    "    {copy $addr alu.2}",
    "    {write [alu.|] $addr}",
    "  else",
    "    {copy $table_addr alu.1}",
    "    {copy alu.! &table_addr}",
    "    {copy &table_addr alu.1}",
    "    {copy $addr alu.2}",
    "    {write [alu.&] $addr}"
  ],
  "sys.vram.get_pixel": [
    "def sys.vram.get_pixel(u16 x, u16 y) -> bool",
    "  include sys.consts",
    "  include sys.vram.shifted_pixels",
    "  let u16 column = x >> 4",
    "  let u16 addr = y << 3",
    "  let u16 table_addr",
    "  {write sys.vram.shifted_pixels &table_addr}",
    "",
    "  let u16 pixel = x & 0xf",
    "  addr += column",
    "  table_addr += pixel",
    "  addr += SYS_VRAM_ADDR",
    "",
    "  {copy $table_addr alu.1}",
    "  {copy $addr alu.2}",
    "  {write [alu.&] &__return}",
    "  {write 0 alu.2}",
    "  {write $__return alu.1}",
    "  {write [alu.>] &__return}"
  ],
  "sys.vram.render_char": [
    "def sys.vram.render_char(u16 char_code, u16 x, u16 y, bool dont_render_spaces = true)",
    "  include sys.vram.glyphs",
    "  ",
    "  if char_code < 32",
    "    char_code = 127",
    "  else if char_code == 32",
    "    if dont_render_spaces",
    "      return",
    "  else if char_code > 129",
    "    char_code = 127",
    "",
    "  char_code -= 32",
    "  ",
    "  let u16 char_pointer = #sys.vram.glyphs#",
    "  let u16 char_offset = char_code << 2",
    "  char_offset += char_code",
    "  char_offset += char_code",
    "  char_pointer += char_offset",
    "",
    "  let u16 vram_pointer = 6152",
    "  let u16 vram_offset_x = x >> 1",
    "  let u16 vram_offset_y = y << 6",
    "  vram_pointer += vram_offset_x",
    "  vram_pointer += vram_offset_y",
    "",
    "  let u16 mask = 0xff00",
    "  let u16 inv_mask = 0x00ff",
    "",
    "  if x",
    "    mask = 0x00ff",
    "    inv_mask = 0xff00",
    "",
    "  let u16 scratch",
    "  let u16 scratch2",
    "",
    "  repeat 6",
    "    {copy $char_pointer alu.1}",
    "    {copy &mask alu.2}",
    "    {copy alu.& &scratch}",
    "    {copy $vram_pointer alu.1}",
    "    {copy &inv_mask alu.2}",
    "    {copy alu.& &scratch2}",
    "    {copy &scratch alu.1}",
    "    {copy &scratch2 alu.2}",
    "    {copy alu.| $vram_pointer}",
    "    char_pointer++",
    "    vram_pointer += 8"
  ],
  "sys.vram.draw_hex_digit": [
    "def sys.vram.draw_hex_digit(u16 num, u16 x, u16 y)",
    "  if num < 10",
    "    sys.vram.render_char(48+num,x,y)",
    "  else ",
    "    sys.vram.render_char(55+num,x,y)"
  ],
  "sys.vram.fast_fill": [
    "def sys.vram.fast_fill(u16 data)",
    "  let u16 tmp",
    "  {write vram.0 alu.1}",
    "  {func_sys.vram.fast_fill_loop:}",
    "  {write 0 alu.2}",
    "  {write $data [alu.+]}",
    "  {write 1 alu.2}",
    "  {write $data [alu.+]}",
    "  {write 2 alu.2}",
    "  {write $data [alu.+]}",
    "  {write 3 alu.2}",
    "  {write $data [alu.+]}",
    "  {write 4 alu.2}",
    "  {write $data [alu.+]}",
    "  {write 5 alu.2}",
    "  {write $data [alu.+]}",
    "  {write 6 alu.2}",
    "  {write $data [alu.+]}",
    "  {write 7 alu.2}",
    "  {write $data [alu.+]}",
    "  {write 8 alu.2}",
    "  {write [alu.+] &tmp}",
    "  {write $tmp alu.1}",
    "  {write vram.1023 alu.2}",
    "  {goto func_sys.vram.fast_fill_loop [alu.>]}"
  ],
  "sys.vram.clear": [
    "def sys.vram.clear()",
    "  sys.vram.fast_fill(0)"
  ],
  "sys.vram.draw_square": [
    "def sys.vram.draw_square(u16 x, u16 y, u16 length, bool data = true)",
    "  length--",
    "  let u16 x_offset = x+length",
    "  let u16 y_offset = y+length",
    "  length++",
    "  let u16 counter = 0",
    "  let u16 x_current",
    "  let u16 y_current",
    "  while counter < length",
    "    x_current = x + counter",
    "    y_current = y + counter",
    "    sys.vram.set_pixel(x_current,y,data)",
    "    sys.vram.set_pixel(x_current,y_offset,data)",
    "    sys.vram.set_pixel(x,y_current,data)",
    "    sys.vram.set_pixel(x_offset,y_current,data)",
    "    counter++"
  ],
  "sys.vram.draw_circle": [
    "def sys.vram.draw_circle(u16 x, u16 y, u16 radius, bool data = true)",
    "  let s16 minustwo = -2",
    "  let s16 f = 1 - radius",
    "  let s16 dx = 1",
    "  let s16 dy = radius * minustwo",
    "  let s16 x1 = 0",
    "  let s16 y1 = radius",
    "  ",
    "  sys.vram.set_pixel(x, y + radius, data)",
    "  sys.vram.set_pixel(x, y - radius, data)",
    "  sys.vram.set_pixel(x + radius, y, data)",
    "  sys.vram.set_pixel(x - radius, y, data)",
    "  ",
    "  while x1 < y1",
    "    if f >= 0",
    "      y1--",
    "      dy += 2",
    "      f += dy",
    "    x1++",
    "    dx += 2",
    "    f += dx",
    "  ",
    "    sys.vram.set_pixel(x + x1, y + y1, data)",
    "    sys.vram.set_pixel(x + y1, y + x1, data)",
    "    sys.vram.set_pixel(x - y1, y + x1, data)",
    "    sys.vram.set_pixel(x - x1, y + y1, data)",
    "    sys.vram.set_pixel(x - x1, y - y1, data)",
    "    sys.vram.set_pixel(x - y1, y - x1, data)",
    "    sys.vram.set_pixel(x + y1, y - x1, data)",
    "    sys.vram.set_pixel(x + x1, y - y1, data)"
  ],
  "sys.vram.draw_line": [
    "def sys.vram.draw_line(u16 x0, u16 y0, u16 x1, u16 y1, bool data = true)",
    "  let s16 dx",
    "  let s16 dy",
    "  let s16 sx",
    "  let s16 sy",
    "  ",
    "  let s16 err",
    "  let s16 e2",
    "  let s16 minus_dx",
    "  ",
    "  if x0 > x1",
    "    dx = x0 - x1",
    "    sx = -1",
    "  else",
    "    dx = x1 - x0",
    "    sx = 1",
    "",
    "  if y0 > y1",
    "    dy = y0 - y1",
    "    sy = -1",
    "  else",
    "    dy = y1 - y0",
    "    sy = 1",
    " ",
    "  if dx > dy",
    "    err = dx",
    "  else",
    "    err = 0-dy",
    "",
    "  err = err >> 1",
    "  minus_dx = 0 - dx",
    "",
    "  while true",
    "    sys.vram.set_pixel(x0,y0,data)",
    "    if x0 == x1",
    "      if y0 == y1",
    "        return",
    "",
    "    e2 = err",
    "    if e2 >= minus_dx",
    "      err -= dy",
    "      x0 += sx ",
    "    ",
    "    if e2 < dy",
    "      err += dx",
    "      y0 += sy"
  ],
  "sys.print_string": [
    "def sys.print_string(str string, u16 x = 0, u16 y = 0)",
    "  let u16 pointer = #$string#",
    "  let u16 char = *pointer",
    "  ",
    "  while char > 0",
    "    sys.vram.render_char(char,x,y)",
    "    x++",
    "    if x > 15",
    "      y++",
    "      x = 0",
    "    pointer++",
    "    char = *pointer"
  ],
  "sys.print_u16": [
    "def sys.print_u16(u16 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "  let u16 x_offset = x",
    "  let bool is_rendering = false",
    "",
    "  let u16 _4_power = 48",
    "  let u16 _3_power = 48",
    "  let u16 _2_power = 48",
    "  let u16 _1_power = 48",
    "  ",
    "  while num > 9999",
    "    num -= 10000",
    "    _4_power += 1",
    "    is_rendering = true",
    "",
    "  if is_rendering | print_all_places",
    "    sys.vram.render_char(_4_power,x_offset,y)",
    "    x_offset++",
    "",
    "  while num > 999",
    "    num -= 1000",
    "    _3_power += 1",
    "    is_rendering = true",
    "",
    "  if is_rendering | print_all_places",
    "    sys.vram.render_char(_3_power,x_offset,y)",
    "    x_offset++",
    "",
    "  while num > 99",
    "    num -= 100",
    "    _2_power += 1",
    "    is_rendering = true",
    "",
    "  if is_rendering | print_all_places",
    "    sys.vram.render_char(_2_power,x_offset,y)",
    "    x_offset++",
    "",
    "  while num > 9",
    "    num -= 10",
    "    _1_power += 1",
    "    is_rendering = true",
    "",
    "  if is_rendering | print_all_places",
    "    sys.vram.render_char(_1_power,x_offset,y)",
    "    x_offset++",
    "",
    "  sys.vram.render_char(num+48,x_offset,y)"
  ],
  "sys.print_u16_as_hex": [
    "def sys.print_u16_as_hex(u16 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "  let u16 x_offset = x",
    "  let bool is_rendering = false",
    "",
    "  let u16 _3_power ",
    "  let u16 _2_power ",
    "  let u16 _1_power ",
    "  let u16 _0_power",
    "",
    "  _0_power = num & 0x000f",
    "  num = num >> 4",
    "  _1_power = num & 0x000f",
    "  num = num >> 4",
    "  _2_power = num & 0x000f",
    "  num = num >> 4",
    "  _3_power = num & 0x000f",
    "  num = num >> 4",
    "",
    "  if _3_power > 0",
    "    is_rendering = true",
    "",
    "  if is_rendering | print_all_places",
    "    sys.vram.draw_hex_digit(_3_power,x_offset,y)",
    "    x_offset++",
    "",
    "  if _2_power > 0",
    "    is_rendering = true",
    "",
    "  if is_rendering | print_all_places",
    "    sys.vram.draw_hex_digit(_2_power,x_offset,y)",
    "    x_offset++",
    "",
    "  if _1_power > 0",
    "    is_rendering = true",
    "",
    "  if is_rendering | print_all_places",
    "    sys.vram.draw_hex_digit(_1_power,x_offset,y)",
    "    x_offset++",
    "",
    "  sys.vram.draw_hex_digit(_0_power,x_offset,y)"
  ],
  "sys.print_s16": [
    "def sys.print_s16(s16 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "  if num < 0",
    "    sys.vram.render_char(45,x,y)",
    "    num = 0 - num",
    "    x++",
    "  else if print_all_places",
    "    sys.vram.render_char(43,x,y)",
    "    x++",
    "",
    "  sys.print_u16(num,x,y,print_all_places)"
  ],
  "sys.print_u32":[
    "def sys.print_u32(u32 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
   "  let u16 char",
   "  let bool did_render = false",
   "  let u32 power",
   "  const array SYS_U32_POWERS = (u32)[999999999,99999999,9999999,999999,99999,9999,999,99,9]",
   "",
   "  for let u16 i = 0; i < SYS_U32_POWERS.len(); i++",
   "    power = SYS_U32_POWERS[i]",
   "    char = 48",
   "    while num > power",
   "      did_render = true",
   "      power++",
   "      num -= power",
   "      power--",
   "      char++",
   "",
   "    if did_render | print_all_places",
   "      sys.vram.render_char(char,x,y)",
   "      x++",
   "       ",
   "  let u16 ones = #$num[1]#",
   "  sys.vram.render_char(ones+48,x,y)"
  ],
  "sys.print_s32":[
    "def sys.print_s32(s32 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "  if num < 0",
    "    sys.vram.render_char(45,x,y)",
    "    num = 0 - num",
    "    x++",
    "  else if print_all_places",
    "    sys.vram.render_char(43,x,y)",
    "    x++",
   "",
   "  sys.print_u32(num,x,y,print_all_places)"
  ],
  "sys.kbd.scancode_to_charcode": [
    "def sys.kbd.scancode_to_charcode(u16 scancode, bool shifted = false) -> u16",
    "  include sys.kbd.scancode_charcode_table",
    "  if scancode == 0",
    "    return 0",
    "",
    "  let u16 table_addr = #sys.kbd.scancode_charcode_table#",
    "  let u16 word",
    "  let u16 charcode",
    "",
    "  table_addr += scancode",
    "  word = *table_addr",
    "",
    "  if shifted",
    "    charcode = word >> 8",
    "  else",
    "    charcode = word & 0x00ff",
    "",
    "  return charcode"
  ],
  "sys.kbd.get_charcode": [
    "def sys.kbd.get_charcode() -> u16",
    "  include sys.consts",
    "  include sys.kbd.shift_state",
    "  let u16 scancode = *SYS_KEYBOARD_ADDR",
    "",
    "  while scancode > 0",
    "    if scancode == 0xAA",
    "      //pass",
    "    else if scancode == 0xF0",
    "      scancode = *SYS_KEYBOARD_ADDR",
    "      if scancode == 0x12",
    "        SYS_KBD_SHIFT = false",
    "    else if scancode == 0xE0",
    "      //pass",
    "    else if scancode == 0x12",
    "      SYS_KBD_SHIFT = true",
    "    else",
    "      return sys.kbd.scancode_to_charcode(scancode, SYS_KBD_SHIFT)",
    "",
    "    scancode = *SYS_KEYBOARD_ADDR",
    "",
    "  return 0"
  ],
  "sys.kbd.shift_state": [
    "global bool SYS_KBD_SHIFT = false"
  ],
  "sys.vram.glyphs": [
    "###",
    "sys.vram.glyphs:",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0000000000000000",
    "0b0100000001000000",
    "0b0101000001010000",
    "0b0101000001010000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0010100000101000",
    "0b0111110001111100",
    "0b0010100000101000",
    "0b0111110001111100",
    "0b0010100000101000",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0011110000111100",
    "0b0101000001010000",
    "0b0011100000111000",
    "0b0001010000010100",
    "0b0111100001111000",
    "0b0110001001100010",
    "0b0110010001100100",
    "0b0000100000001000",
    "0b0001000000010000",
    "0b0010011000100110",
    "0b0100011001000110",
    "0b0011000000110000",
    "0b0100100001001000",
    "0b0011000000110000",
    "0b0101100001011000",
    "0b0100100001001000",
    "0b0011010000110100",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0010000000100000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0010000000100000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0000100000001000",
    "0b0000010000000100",
    "0b0000010000000100",
    "0b0000100000001000",
    "0b0001000000010000",
    "0b0101010001010100",
    "0b0011100000111000",
    "0b0110110001101100",
    "0b0011100000111000",
    "0b0101010001010100",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0111110001111100",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0110000001100000",
    "0b0010000000100000",
    "0b0100000001000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0111110001111100",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0100000001000000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0100110001001100",
    "0b0101010001010100",
    "0b0110010001100100",
    "0b0011100000111000",
    "0b0000100000001000",
    "0b0001100000011000",
    "0b0000100000001000",
    "0b0000100000001000",
    "0b0000100000001000",
    "0b0001110000011100",
    "0b0011100000111000",
    "0b0000010000000100",
    "0b0000010000000100",
    "0b0001100000011000",
    "0b0010000000100000",
    "0b0011110000111100",
    "0b0011100000111000",
    "0b0000010000000100",
    "0b0001100000011000",
    "0b0000010000000100",
    "0b0000010000000100",
    "0b0011100000111000",
    "0b0001100000011000",
    "0b0010100000101000",
    "0b0100100001001000",
    "0b0011110000111100",
    "0b0000100000001000",
    "0b0000100000001000",
    "0b0011110000111100",
    "0b0010000000100000",
    "0b0001100000011000",
    "0b0000010000000100",
    "0b0010010000100100",
    "0b0001100000011000",
    "0b0001100000011000",
    "0b0010000000100000",
    "0b0011100000111000",
    "0b0010010000100100",
    "0b0010010000100100",
    "0b0001100000011000",
    "0b0111100001111000",
    "0b0000100000001000",
    "0b0001110000011100",
    "0b0000100000001000",
    "0b0000100000001000",
    "0b0000100000001000",
    "0b0001100000011000",
    "0b0010010000100100",
    "0b0001100000011000",
    "0b0010010000100100",
    "0b0010010000100100",
    "0b0001100000011000",
    "0b0001100000011000",
    "0b0010010000100100",
    "0b0010010000100100",
    "0b0001110000011100",
    "0b0000010000000100",
    "0b0001100000011000",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0010000000100000",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0010000000100000",
    "0b0100000001000000",
    "0b0010000000100000",
    "0b0001000000010000",
    "0b0000000000000000",
    "0b0111110001111100",
    "0b0000000000000000",
    "0b0111110001111100",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0100000001000000",
    "0b0010000000100000",
    "0b0001000000010000",
    "0b0010000000100000",
    "0b0100000001000000",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0001100000011000",
    "0b0001000000010000",
    "0b0000000000000000",
    "0b0001000000010000",
    "0b0011110000111100",
    "0b0100001001000010",
    "0b0101101001011010",
    "0b0101111001011110",
    "0b0100000001000000",
    "0b0011110000111100",
    "0b0001000000010000",
    "0b0010100000101000",
    "0b0100010001000100",
    "0b0111110001111100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0111100001111000",
    "0b0100010001000100",
    "0b0111100001111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0111100001111000",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0111100001111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0111100001111000",
    "0b0111110001111100",
    "0b0100000001000000",
    "0b0111100001111000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0111110001111100",
    "0b0111110001111100",
    "0b0100000001000000",
    "0b0111100001111000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0011100000111000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0101110001011100",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0111110001111100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0111110001111100",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0111110001111100",
    "0b0111110001111100",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b1001000010010000",
    "0b0110000001100000",
    "0b0100010001000100",
    "0b0100100001001000",
    "0b0101000001010000",
    "0b0111000001110000",
    "0b0100100001001000",
    "0b0100010001000100",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0111110001111100",
    "0b0100010001000100",
    "0b0110110001101100",
    "0b0101010001010100",
    "0b0101010001010100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0110010001100100",
    "0b0101010001010100",
    "0b0100110001001100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0111100001111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0111100001111000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0101010001010100",
    "0b0100100001001000",
    "0b0011010000110100",
    "0b0111100001111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0111100001111000",
    "0b0100100001001000",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0011000000110000",
    "0b0000100000001000",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0111110001111100",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0010100000101000",
    "0b0010100000101000",
    "0b0001000000010000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0101010001010100",
    "0b0101010001010100",
    "0b0110110001101100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0010100000101000",
    "0b0001000000010000",
    "0b0010100000101000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0111110001111100",
    "0b0000010000000100",
    "0b0000100000001000",
    "0b0001000000010000",
    "0b0010000000100000",
    "0b0111110001111100",
    "0b0110000001100000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0110000001100000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0110000001100000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0110000001100000",
    "0b0001000000010000",
    "0b0010100000101000",
    "0b0100010001000100",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0111111001111110",
    "0b0100000001000000",
    "0b0010000000100000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0011100000111000",
    "0b0000010000000100",
    "0b0011110000111100",
    "0b0100010001000100",
    "0b0011110000111100",
    "0b0100000001000000",
    "0b0101100001011000",
    "0b0110010001100100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0111100001111000",
    "0b0000000000000000",
    "0b0011100000111000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0000010000000100",
    "0b0011010000110100",
    "0b0100110001001100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0011110000111100",
    "0b0000000000000000",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0111110001111100",
    "0b0100000001000000",
    "0b0011100000111000",
    "0b0000011000000110",
    "0b0000100000001000",
    "0b0001110000011100",
    "0b0000100000001000",
    "0b0000100000001000",
    "0b0000100000001000",
    "0b0000000000000000",
    "0b0011110000111100",
    "0b0100010001000100",
    "0b0011110000111100",
    "0b0000010000000100",
    "0b0011100000111000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0101100001011000",
    "0b0110010001100100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0010000000100000",
    "0b0000000000000000",
    "0b0110000001100000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0111000001110000",
    "0b0001000000010000",
    "0b0000000000000000",
    "0b0011000000110000",
    "0b0001000000010000",
    "0b1001000010010000",
    "0b0110000001100000",
    "0b0100000001000000",
    "0b0100100001001000",
    "0b0101000001010000",
    "0b0110000001100000",
    "0b0101000001010000",
    "0b0100100001001000",
    "0b0110000001100000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0111000001110000",
    "0b0000000000000000",
    "0b0110100001101000",
    "0b0101010001010100",
    "0b0101010001010100",
    "0b0101010001010100",
    "0b0101010001010100",
    "0b0000000000000000",
    "0b0101100001011000",
    "0b0110010001100100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0000000000000000",
    "0b0011100000111000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0011100000111000",
    "0b0000000000000000",
    "0b0111100001111000",
    "0b0100010001000100",
    "0b0111100001111000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0000000000000000",
    "0b0011110000111100",
    "0b0100010001000100",
    "0b0011110000111100",
    "0b0000010000000100",
    "0b0000010000000100",
    "0b0000000000000000",
    "0b0101100001011000",
    "0b0110010001100100",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0000000000000000",
    "0b0011110000111100",
    "0b0100000001000000",
    "0b0011100000111000",
    "0b0000010000000100",
    "0b0111100001111000",
    "0b0010000000100000",
    "0b0111100001111000",
    "0b0010000000100000",
    "0b0010000000100000",
    "0b0010010000100100",
    "0b0001100000011000",
    "0b0000000000000000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0100110001001100",
    "0b0011010000110100",
    "0b0000000000000000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0010100000101000",
    "0b0010100000101000",
    "0b0001000000010000",
    "0b0000000000000000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0101010001010100",
    "0b0101010001010100",
    "0b0010100000101000",
    "0b0000000000000000",
    "0b0110010001100100",
    "0b0001100000011000",
    "0b0001000000010000",
    "0b0011000000110000",
    "0b0100110001001100",
    "0b0000000000000000",
    "0b0100010001000100",
    "0b0100010001000100",
    "0b0011110000111100",
    "0b0000010000000100",
    "0b0011100000111000",
    "0b0000000000000000",
    "0b0111110001111100",
    "0b0000100000001000",
    "0b0001000000010000",
    "0b0010000000100000",
    "0b0111110001111100",
    "0b0011000000110000",
    "0b0010000000100000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0010000000100000",
    "0b0011000000110000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0100000001000000",
    "0b0110000001100000",
    "0b0010000000100000",
    "0b0001000000010000",
    "0b0001000000010000",
    "0b0010000000100000",
    "0b0110000001100000",
    "0b0000000000000000",
    "0b0010000000100000",
    "0b0101010001010100",
    "0b0000100000001000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0111011101110111",
    "0b0100010101000101",
    "0b0111011001110110",
    "0b0100010101000101",
    "0b0100010101000101",
    "0b0111010101110101",
    "0b1000000010000000",
    "0b1000000010000000",
    "0b1000000010000000",
    "0b1000000010000000",
    "0b1000000010000000",
    "0b1000000010000000",
    "###"
  ],
  "sys.kbd.scancode_charcode_table": [
    "###",
    "sys.kbd.scancode_charcode_table:",
    "0b0000000000000000",
    "0b0001001100010011",
    "0b0000000000000000",
    "0b0000111100001111",
    "0b0000110100001101",
    "0b0000101100001011",
    "0b0000110000001100",
    "0b0001011000010110",
    "0b0000000000000000",
    "0b0001010000010100",
    "0b0001001000010010",
    "0b0001000000010000",
    "0b0000111000001110",
    "0b0000001000000010",
    "0b1010110001100000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000011000000110",
    "0b0000010000000100",
    "0b0000000000000000",
    "0b0000010100000101",
    "0b0101000101110001",
    "0b0010000100110001",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0101101001111010",
    "0b0101001101110011",
    "0b0100000101100001",
    "0b0101011101110111",
    "0b0010001000110010",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0100001101100011",
    "0b0101100001111000",
    "0b0100010001100100",
    "0b0100010101100101",
    "0b0010010000110100",
    "0b1010001100110011",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0010000000100000",
    "0b0101011001110110",
    "0b0100011001100110",
    "0b0101010001110100",
    "0b0101001001110010",
    "0b0010010100110101",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0100111001101110",
    "0b0100001001100010",
    "0b0100100001101000",
    "0b0100011101100111",
    "0b0101100101111001",
    "0b0101111000110110",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0100110101101101",
    "0b0100101001101010",
    "0b0101010101110101",
    "0b0010011000110111",
    "0b0010101000111000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0011110000101100",
    "0b0100101101101011",
    "0b0100100101101001",
    "0b0100111101101111",
    "0b0010100100110000",
    "0b0010100000111001",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0011111000101110",
    "0b0011111100101111",
    "0b0100110001101100",
    "0b0011101000111011",
    "0b0101000001110000",
    "0b0101111100101101",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0100000000100111",
    "0b0111111000100011",
    "0b0111101101011011",
    "0b0010101100111101",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000001100000011",
    "0b0000011100000111",
    "0b0000100000001000",
    "0b0111110101011101",
    "0b0000000000000000",
    "0b0111110001011100",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000100000001",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0001110000011100",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0001111000011110",
    "0b0000000000000000",
    "0b0001101100011011",
    "0b0001110100011101",
    "0b0000100100001001",
    "0b0000000000000000",
    "0b0001010100010101",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0000000000000000",
    "0b0001000100010001",
    "###"
  ],
  "sys.vram.shifted_pixels": [
    "###",
    "sys.vram.shifted_pixels:",
    "0b1000000000000000",
    "0b0100000000000000",
    "0b0010000000000000",
    "0b0001000000000000",
    "0b0000100000000000",
    "0b0000010000000000",
    "0b0000001000000000",
    "0b0000000100000000",
    "0b0000000010000000",
    "0b0000000001000000",
    "0b0000000000100000",
    "0b0000000000010000",
    "0b0000000000001000",
    "0b0000000000000100",
    "0b0000000000000010",
    "0b0000000000000001",
    "###"
  ],
  "sys.get_lib_version":[
    "def sys.get_lib_version() -> str",
    "  return \"0.47.1\"",
  ],
  "sys.signatures": [
    "sig sys.u16_multiply(u16 a, u16 b) -> u16",
    "sig sys.u16_divide(u16 a, u16 b) -> u16",
    "sig sys.u16_exponent(u16 a, u16 b) -> u16",
    "sig sys.u16_modulo(u16 a, u16 b) -> u16",
    "sig sys.s16_multiply(s16 a, s16 b) -> s16",
    "sig sys.s16_divide(s16 a, s16 b) -> s16",
    "sig sys.s16_exponent(s16 a, s16 b) -> s16",
    "sig sys.s16_modulo(s16 a, s16 b) -> s16",
    "sig sys.s16_rshift(s16 a) -> s16",
    "sig sys.u32_add(u32 a, u32 b) -> u32",
    "sig sys.u32_subtract(u32 a, u32 b) -> u32",
    "sig sys.u32_multiply(u32 a, u32 b) -> u32",
    "sig sys.u32_divide(u32 a, u32 b) -> u32",
    "sig sys.u32_exponent(u32 a, u32 b) -> u32",
    "sig sys.u32_modulo(u32 a, u32 b) -> u32",
    "sig sys.u32_lshift(u32 a) -> u32",
    "sig sys.u32_rshift(u32 a) -> u32",
    "sig sys.u32_not_equal(u32 a, u32 b) -> bool",
    "sig sys.u32_equal(u32 a, u32 b) -> bool",
    "sig sys.u32_greater(u32 a, u32 b) -> bool",
    "sig sys.u32_less(u32 a, u32 b) -> bool",
    "sig sys.s32_multiply(s32 a, s32 b) -> s32",
    "sig sys.s32_divide(s32 a, s32 b) -> s32",
    "sig sys.s32_exponent(s32 a, s32 b) -> s32",
    "sig sys.s32_modulo(s32 a, s32 b) -> s32",
    "sig sys.s32_rshift(s32 a) -> s32",
    "sig sys.s32_greater(s32 a, s32 b) -> bool",
    "sig sys.s32_less(s32 a, s32 b) -> bool",
    "sig sys.mem_copy(u16 origin_addr, u16 target_addr, u16 length)",
    "sig sys.array_set(u16 base_addr, u16 item_size, u16 index, u16 item_addr)",
    "sig sys.array_read(u16 base_addr, u16 item_size, u16 index, u16 target_addr)",
    "sig sys.array_shift(u16 base_addr, u16 item_size, u16 index, u16 length)",
    "sig sys.vram.or_word(u16 word, u16 addr)",
    "sig sys.vram.nand_word(u16 word, u16 addr)",
    "sig sys.vram.set_pixel(u16 x, u16 y, bool data = true)",
    "sig sys.vram.get_pixel(u16 x, u16 y) -> bool",
    "sig sys.vram.render_char(u16 char_code, u16 x, u16 y, bool dont_render_spaces = true)",
    "sig sys.vram.draw_hex_digit(u16 num, u16 x, u16 y)",
    "sig sys.vram.fast_fill(u16 data)",
    "sig sys.vram.clear()",
    "sig sys.vram.draw_square(u16 x, u16 y, u16 length, bool data = true)",
    "sig sys.vram.draw_circle(u16 x, u16 y, u16 radius, bool data = true)",
    "sig sys.vram.draw_line(u16 x0, u16 y0, u16 x1, u16 y1, bool data = true)",
    "sig sys.print_string(str string, u16 x = 0, u16 y = 0)",
    "sig sys.print_u16(u16 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "sig sys.print_u16_as_hex(u16 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "sig sys.print_s16(s16 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "sig sys.print_u32(u32 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "sig sys.print_s32(s32 num, u16 x = 0, u16 y = 0, bool print_all_places = false)",
    "sig sys.kbd.scancode_to_charcode(u16 scancode, bool shifted = false) -> u16",
    "sig sys.kbd.get_charcode() -> u16",
    "sig sys.get_lib_version() -> str"
  ]
}
