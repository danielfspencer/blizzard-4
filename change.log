<ul>
<li>Initial support for libraries</li>
<li>Experimental support for multiple data types</li>
<li>Fixed 'already compiling' lock</li>
</ul>

<hr>

<ul>
<li>Expressions in structures now functional</li>
<li>If and While structures now implemented</li>
<li>Initial support for functions (args and returns) and variable scope</li>
<li>Support for ++, +=, --, -= operators</li>
<li>More debugging messages generated by compiler</li>
<li>Indent and structure parsing rewritten to support nested structures</li>
<li>More robust integer checks</li>
</ul>

<hr>

<h3>15/9/16</h3>
<ul>
<li>Address bus redesigned for decreased complexity</li>
<li>Function argument memory design finalised</li>
<li>Instruction set argument layout redesigned</li>
<li>Keyboard buffer implementation improved</li>
<li>Base clock increased to 1kHz</li>
</ul>

<hr>

<h3>22/11/15</h3>
<ul>
<li>Images in manual now stored locally for speed</li>
</ul>

<hr>

<h3>18/10/15</h3>
<ul>
<li>Maximise button added</li>
<li>Added more information about the whole Blizzard series</li>
<li>Alignment issue with menu icon fixed</li>
<li>Manual index no-longer hyper linked to get round Chrome bug</li>
<li>Added more images to manual</li>
</ul>

<hr>

<h3>10/10/15</h3>
<ul>
<li>Version checker now pulls version directly from manifest file</li>
<li>Added image gallery to manual w/ cool loading spinners</li>
<li>Fixed bug that prevented firefox from showing version number in menu</li>
<li>Indents are now properly recognised</li>
<li>Spell check also disabled in assembler</li>
<li>Added close and minimise buttons</li>
<li>Fixed small alignment issue in manual</li>
<li>Added about box and licence</li>
<li>Images are now zoomable</li>
<li>Menu button now animated</li>
</ul>

<hr>

<h3>3/10/15</h3>
<ul>
<li>Experimental structure tokenising implemented</li>
<li>Tokens that produce no machine code are properly handled</li>
<li>Removed annoying focus highlight on text boxes in Chrome</li>
<li>Automatic update checker added to manual section</li>
</ul>

<hr>

<h3>27/9/15</h3>
<ul>
<li>Variables and constants now share the same namespace (can't have two named the same thing)</li>
<li>Realtime-compilation option added</li>
<li>Error handling for expressions has been improved</li>
<li>Translation errors now give a line number</li>
</ul>

<hr>

<h3>20/9/15</h3>
<ul>
<li>'alloc' has been re-named 'var' for clarity</li>
<li>Error reporting for tokenisation now has a line number</li>
<li>Constant deceleration (const) is now implemented</li>
</ul>

<hr>

<h3>6/9/15 & 13/9/15</h3>
<p>Bugfixes:</p>
<ul>
<li>Corrected strange bug with alloc tokens not accepting extra parameters</li>
<li>Button in compiler now says 'Compile' not 'Assemble'</li>
<li>Fixed issue with some expressions generating double-nested prefixes!</li>
<li>Spellcheck is now disabled in compiler input</li>
<li>Assign command (=) now fully tokenises</li>
<li>Single-operand expressions now work correctly</li>
<li>'alloc' properly handles long expressions</li>
</ul>
<p>Additions:</p>
<ul>
<li>Added support for mathematical expressions</li>
</ul>

<hr>

<h3>29/8/15</h3>
<p>Bugfixes:</p>
<ul>
<li>Fixed crash on Chrome caused by use of unsupported var de-structuring assignment</li>
<li>Tokeniser error reporter now prints the exact string that caused the error not the whole line (was misleading)</li>
</ul>

<hr>

<h3>16/8/15</h3>
<p>Much more work on compiler itself and interface:</p>
<ul>
<li>Fixed 'alloc' token not properly parsing default value argument</li>
<li>Added log to interface to give detailed feedback and report errors during compilation</li>
<li>Progress bar added and compiler now runs in separate worker thread</li>
<li>Experimental version of tokeniser implemented</li>
</ul>

<hr>

<h3>2/8/15 & 9/8/15</h3>
<p>Holiday</p>

<hr>

<h3>25/7/15</h3>
<p>Translated python compiler prototype into java script and added support for while, for and if structures.</p>

<hr>

<h3>18/7/15</h3>
<p>Created prototype python version of compiler that uses a two-step approach to compilation. <a href="../assets/compiler.py">Click here to see source code</a> How it works:</p>
<ul>
<li>Tokeniser - this interprets the input and turns in into a series of tokens (making it more machine-readable and verbose)</li>
<li>Translator - turns the tokens into assembly code using a series of preset templates</li>
<li>(separately) Assembler - turns the assembly code into machine code (1s & 0s)</li>
</ul>


<hr>

<h3>12/7/15</h3>
<p>Groundwork for compiler interface laid.</p>

<hr>

<h3>5/7/15</h3>
<p>Misc bug fixes! Some interface code re-factoring soon.</p>

<hr>


<h3>26/6/15</h3>
<p>Updated 'letters.asm' demo to include more characters and scrolling (set user input 1 to 1 to scroll!).</p>
<ul>
<li>Slight alterations to instruction set, see table for more details.</li>
<li>Issue with user input never being updated due to incorrect on modification hook.</li>
<li>VRAM now readable as it should be.</li>
</ul>

<hr>


<h3>18/6/15</h3>
<p>Started work on the manual!</p>
<ul>
<li>New architecture overview diagram.</li>
<li>New opcode table<./li>
</ul>

<hr>

<h3>7/6/15</h3>
<p>Misc bug fixes!</p>

<hr>

<h3>31/5/15</h3>
<p>Screen now implemented! No copy-pasting required, just go to the assembler and click "letters.asm" for a demo.</p>
<ul>
<li>New examples section in assembler gives quick access to programs.</li>
<li>Fixed an issue with GOTO in the emulator (was not properly truncating arguments).</li> 
</ul>

<hr>

<h3>24/5/15</h3>
<ul>
<li>Function call stack now implemented!</li>
<li>Fixed an issue with labels in assembler</li> 
<li>Re-organised interface rendering in emulator ahead of implementing the display</li>
<li>usr.1 & 2 number input boxes now implemented</li>
</ul>

<hr>

<h3>17/5/15</h3>
<p>Demo multiplication routine (6*7). Paste into assembler and click run!</p>
<pre>
copy 6 ram.0
copy 7 ram.1

copy [ram.0] dcm.1
copy [ram.1] dcm.2
loop:
    copy [ram.1] cnd
    goto? rest
    copy [ram.2] alu.1
    copy [ram.0] alu.2
    copy [alu.+] ram.2
    rest:
    copy [ram.0] alu.1
    copy [alu.<<] ram.0
    copy [ram.1] alu.1
    copy [alu.>>] ram.1

    copy [ram.1] alu.1
    copy 0 alu.2
    copy [alu.=] cnd
    goto? loop
copy [ram.2] dcm.3
stop
</pre>
<ul>
<li>Labels now supported in the assembler</li> 
<li>New material-design check-boxes</li>
</ul>

<hr>

<h3>7/5/15</h3>
<p>Paste the following into the assembler and click assemble then run! and start on next page :)</p>
<pre>
copy 100 alu.2
loop:
copy [alu.+1] ram.1
copy [ram.1] dcm.1
copy [ram.1] alu.1
copy [alu.<] cnd
stop? 0
goto loop
</pre>
<ul>
<li>Nearly all registers now functional</li> 
<li>Assembler now implemented, needs only minor fixes</li>
<li>Performance improvements to numbered text boxes (now on v-sync not on scroll)</li>
</ul>

<hr>

<h3>3/5/15</h3>
<p>When the screen is finished, not much more has to be done before the emulator is fully operational :)</p>
<ul>
<li>Basic framework for emulation of the registers set-up</li> 
<li>ROM numbering now starts from 0 as it should</li>
</ul>

<hr>

<h3>25/4/15</h3>
<p>Documentation now available in the 'Manual' section</p>

<hr>

<h3>19/4/15</h3>
<p>Now a Google Chrome app! Can be installed as stand-alone program through Google Chrome or just viewed in a web browser! How to use as an app:</p>
<ul>
<li>Extract the 'app' folder to your computer</li>
<li>Google Chrome > Menu Button > More Tools > Extensions > Check 'Developer Mode' > Load Unpacked extension > select the 'app' folder you downloaded and press OK</li>
<li>Assess from apps tab on chrome</li>
</ul>

<hr>

<h3>5/4/15 & 12/4/15</h3>
<ul>
<li>All processor modes functional, registers (they do all the actual maths 'n logic) yet to be implemented</li> 
<li>Paste: <br> 0100000000001000 <br> 0000000000000000 <br> into ROM box and press start to see the GOTO command in action (this does not use any registers)</li>
<li>Spelling of "Curent Command" to "Current Command"</li>
</ul>

<hr>

<h3>21/3/15 & 28/3/15</h3>
<ul>
<li>More work on emulation framework - will be ready soon!</li> 
</ul>

<hr>

<h3>14/3/15</h3>
<ul>
<li>100% more emulation! first processor mode implemented</li> 
</ul>

<hr>

<h3>8/3/13</h3>
<ul>
<li>State info card Fixed</li> 
<li>DCM displays now work</li>
</ul>

<hr>

<h3>1/3/15</h3>
<ul>
<li>Attempt to implement DCM1-3 output (numbers) in emulator</li> 
</ul>

<hr>

<h3>22/2/15</h3>
<p>After being planned for a long time, I have begun typing up the design of the computer and writing an emulator. Access to all files related to project (in my Dropbox): https://www.dropbox.com/sh/5g30avu8xsgdwl5/AACwiK_AoGi5DhknOh1mE_0Ma?dl=0&s=sl here</a></p>
<ul>
<li>Front-end for emulator</li> 
<li>Draft of compiled language, type up of machine language soon</li>
</ul>

<br><br><br>
